<?php
{{ copyrightHeader }}
namespace App\Http\Controllers;

{{ useStatements }}
use Illuminate\Http\Request;

class {{ className }} extends Controller
{
    /**
     * Display a listing of the resource with pagination.
     */
    public function index()
    {
        // Retrieve paginated results
        ${{ plural }} = {{ model }}::paginate(config('app.pagination_limit', 20));

        return view('{{ table_name }}.index', compact('{{ plural }}'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        {{ relatedData }}

        return view('{{ table_name }}.create'{{ relatedCompactCreate }});
    }

    /**
     * Store a newly created resource in storage using validated request data.
     */
    public function store({{ model }}Request $request)
    {
        {{ model }}::create($request->validated());

        return redirect()->route('{{ table_name }}.index')
            ->with('success', __('skeletons.created_successfully', ['model' => '{{ model }}']));
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        ${{ singular }} = {{ model }}::findOrFail($id);

        return view('{{ table_name }}.show', compact('{{ singular }}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        ${{ singular }} = {{ model }}::findOrFail($id);{{ relatedData }}
        return view('{{ table_name }}.edit', compact({{ relatedCompactEdit }}));
    }

    /**
     * Update the specified resource in storage using validated request data.
     */
    public function update({{ model }}Request $request, string $id)
    {
        ${{ singular }} = {{ model }}::findOrFail($id);

        ${{ singular }}->update($request->validated());

        return redirect()->route('{{ table_name }}.index')
            ->with('success', __('skeletons.updated_successfully', ['model' => '{{ model }}']));
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        ${{ singular }} = {{ model }}::find($id);

        if (${{ singular }}) {
            ${{ singular }}->delete();
        }

        return redirect()->route('{{ table_name }}.index')
            ->with('success', __('skeletons.deleted_successfully', ['model' => '{{ model }}']));
    }

    /**
     * Search for resources based on provided needle input.
     */
    public function search(Request $request)
    {
        $needle = $request->get('needle');
        $searchColumn = 'name'; 

        try {
            ${{ plural }} = {{ model }}::orderBy($searchColumn)
                ->where($searchColumn, 'like', "%{$needle}%")
                ->paginate(config('app.pagination_limit', 20));

            return view('{{ table_name }}.index', compact('{{ plural }}'));

        } catch (\Illuminate\Database\QueryException $e) {
            if (strpos(strtolower($e->getMessage()), 'unknown column') !== false) {
                $errors = \Illuminate\Support\Facades\Validator::make([], [])
                    ->errors();
                $errors->add('search_error', __('skeletons.search_column_missing', ['column' => $searchColumn]));

                return redirect()->back()->withErrors($errors)->withInput();
            }

            // Handle other potential database errors if needed
            throw $e;
        }
    }
}
