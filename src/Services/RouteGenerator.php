<?php

namespace App\Services;

use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class RouteGenerator extends AbstractGenerator
{

    public function generate(): ?array
    {
        // Determine if auth middleware is available
        $hasAuthMiddleware = in_array('auth', array_keys(app('router')->getMiddleware()));

        $stubFileName = $hasAuthMiddleware ? 'routes_auth.stub' : 'routes.stub';
        try {
            $stubContent = self::getStubContent($stubFileName);
        }
        catch (\Exception $e) {
            $this->command->error($e->getMessage());
            return null;
        }
        // Use $tableName directly for plural and derive singular
        $controller = "{$this->modelName}Controller";
        $plural = $this->tableName; // Table name is the plural form
        $singular = Str::singular($this->tableName); // Generate singular form

        $placeholders = [
            '{{controller}}' => $controller,
            '{{model}}' => $this->modelName,
            '{{plural}}' => $plural,
            '{{singular}}' => $singular,
        ];
        $content = $this->replacePlaceholders($stubContent, $placeholders);
        $filePath = self::getPath(base_path("routes/{$plural}.php"));
        $this->createBackup($filePath);
        File::put($filePath, $content);
        $this->generatedFiles[] = $filePath;
        $this->updateWebRoutes();

        $this->command->info("Routes for {$this->modelName} created successfully in routes" . DIRECTORY_SEPARATOR . "{$plural}.php");

        return [
            'generated_files' => $this->generatedFiles,
            'backup_files'    => $this->backupFiles,
        ];
    }

    public function updateWebRoutes()
    {
        $webRoutes = base_path("routes"  . DIRECTORY_SEPARATOR . "web.php");

        // Read the existing web.php content
        $webContent = File::exists($webRoutes) ? File::get($webRoutes) : "<?php\n\n";

        // Add require_once statements for only the files generated by this class
        foreach ($this->generatedFiles as $filePath) {
            $relativePath = Str::replace(base_path() . DIRECTORY_SEPARATOR, '', $filePath);
            $requireLine = "require_once base_path('{$relativePath}');";

            if (!Str::contains($webContent, $requireLine)) {
                $webContent .= $requireLine . "\n";
            }
        }

        // Write the updated content back to web.php
        File::put($webRoutes, $webContent);
        $this->command->info("web.php updated with route file imports.");
    }

    public function rollback(): void
    {
        foreach ($this->generatedFiles as $filePath) {
            if (File::exists($filePath)) {
                $this->removeRequireFromWebRoutes($filePath);
            }
        }
        parent::rollback();
    }

    protected function removeRequireFromWebRoutes(string $filePath)
    {
        $webRoutes = self::getPath(base_path("routes"  . DIRECTORY_SEPARATOR . "web.php"));

        // Check if web.php exists
        if (!File::exists($webRoutes)) {
            $this->command->warn("web.php not found. Skipping removal of require instruction.");
            return;
        }

        // Read the content of web.php
        $webContent = File::get($webRoutes);

        // Generate the require_once line to remove
        $relativePath = Str::replace(base_path() . DIRECTORY_SEPARATOR, '', $filePath);
        $requireLine = "require_once base_path('{$relativePath}');";

        // Remove the line if it exists
        if (Str::contains($webContent, $requireLine)) {
            $webContent = Str::replace($requireLine . "\n", '', $webContent);
            File::put($webRoutes, $webContent);
            $this->command->info("Removed require instruction for {$relativePath} from web.php.");
        }
    }
}
